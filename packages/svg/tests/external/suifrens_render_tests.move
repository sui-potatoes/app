// Copyright (c) Sui Potatoes
// SPDX-License-Identifier: MIT

// The Suifrens design system is subject to copyright and should be used with
// permission from the author. For more information, visit https://suifrens.com/
// Original copyright header attached:

// Copyright (c) Mysten Labs, Inc.
// SPDX-License-Identifier: Apache-2.0

/// Implements rendering tests for SuiFrens design system.
module svg::suifrens_render_tests;

use std::string::String;
use svg::{container, shape, svg};

#[test, expected_failure] // timeout
#[allow(unused_variable)]
fun test_render_suifren() {
    let main_color = b"#6FBBEE".to_string();
    let secondary_color = b"#E6FBFF".to_string();
    let skin = b"basic".to_string();
    let fin_style = b"classic".to_string();
    let expression = b"grimace".to_string();

    let mut svg = svg::svg(vector[0, 0, 3000, 3000]);

    // bottom element, goes before everything else
    svg.add_root(vector[shadow()]);
    svg.add(right_arm(main_color));
    svg.add(right_leg(main_color));
    svg.add(body(main_color));
    svg.add(left_leg(main_color));
    svg.add(left_arm(main_color));
    svg.add(right_ear(main_color));
    svg.add(head(main_color));
    svg.add(left_ear(main_color));
    svg.add_root(vector[logo()]);

    let data_uri = svg.to_data_uri();

    std::debug::print(&data_uri.length().to_string());
    std::debug::print(&data_uri);
    // svg.debug();
}

/// Creates a bottom shadow for the SVG.
fun shadow(): shape::Shape {
    shape::ellipse(1400, 2615, 472, 130).map_attributes!(|attrs| {
        attrs.insert(b"opacity".to_string(), b"0.3".to_string());
    })
}

/// Draws a Sui logo.
fun logo(): shape::Shape {
    let logo_path = b"M2727.8,2633.6L2727.8,2633.6c9.4,11.9,15,27,15,43.3c0,16.4-5.8,31.9-15.4,43.8l-0.8,1l-0.2-1.3  c-0.2-1.1-0.4-2.2-0.7-3.4c-4.8-21.4-20.5-39.8-46.4-54.6c-17.5-10-27.5-22.1-30.1-35.8c-1.7-8.9-0.4-17.8,2-25.4  c2.4-7.6,6.1-14,9.1-17.8l10.1-12.4c1.8-2.2,5.1-2.2,6.8,0L2727.8,2633.6L2727.8,2633.6z M2743.7,2621.2L2743.7,2621.2l-67.4-83.3  c-1.3-1.6-3.7-1.6-5,0l-67.4,83.3v0l-0.2,0.3c-12.4,15.6-19.8,35.3-19.8,56.8c0,50.1,40.3,90.7,90,90.7s90-40.6,90-90.7  c0-21.5-7.4-41.3-19.8-56.8L2743.7,2621.2L2743.7,2621.2z M2619.9,2633.4l6-7.5l0.2,1.4c0.2,1.1,0.3,2.2,0.5,3.3  c3.9,20.7,17.9,37.9,41.2,51.3c20.3,11.6,32.1,25,35.5,39.7c1.4,6.1,1.7,12.2,1.1,17.4l0,0.3l-0.3,0.1c-9.1,4.5-19.4,7.1-30.3,7.1  c-38.1,0-69-31.2-69-69.6C2604.7,2660.4,2610.4,2645.3,2619.9,2633.4L2619.9,2633.4z".to_string();
    shape::path(logo_path, option::none()).map_attributes!(|attrs| {
        attrs.insert(b"fillRule".to_string(), b"evenodd".to_string());
        attrs.insert(b"clipRule".to_string(), b"evenodd".to_string());
    })
}

fun right_arm(fill: String): container::Container {
    let mut paths = vector[
        b"M33.7,172.4c0.4,0,0.8,0,1.3,0c10.6-0.3,19.7-4.4,27-12.3c3.3-3.5,6-7.5,7.9-11.8c3.5-0.9,6.5-2.7,9-5.4c0,0,0,0,0,0 c3.5-3.9,5.2-8.5,5.1-13.7c0,0,0,0,0,0c-0.2-5.3-2.2-9.7-6-13.3c-1-0.9-2-1.7-3.1-2.4c1.3-12.5,3.7-25.3,7.2-38.1 c3.7-13.5,12.1-28.7,25-45.1c1.7-2.2,1.3-5.3-0.8-7c-2.2-1.7-5.3-1.3-7,0.8C85.5,41.6,76.5,57.9,72.4,72.7 c-3.9,14.5-6.5,29-7.8,43.1c0,0.4,0,0.8,0,1.2c0.1,0.7,0.4,1.4,0.8,2c0.4,0.6,0.9,1.1,1.6,1.5c0.3,0.2,0.7,0.4,1.1,0.5 c1.1,0.4,2.1,1,3,1.9c0,0,0.1,0.1,0.1,0.1c1.9,1.7,2.8,3.7,2.9,6.3c0.1,2.6-0.7,4.8-2.5,6.7c-1.5,1.6-3.4,2.5-5.8,2.8 c-1.9,0.2-3.5,1.5-4.2,3.3c-1.5,4.1-3.7,7.8-6.8,11c0,0,0,0,0,0c-5.5,5.9-12.1,8.9-20,9.1c-8,0.2-14.8-2.3-20.6-7.8 c-5.8-5.5-8.7-12-9-19.9c0,0,0-0.1,0-0.1c-0.1-1.6,0-3.2,0.2-4.6c0-0.2,0-0.3,0-0.5c0.4-6.9,0.8-13.7,1.2-20.3 c0.6-5.3,1.2-10.7,1.9-16c2.1-16.3,6.1-32.4,11.9-48c6.4-17.1,17.2-30.9,32.3-41.1c2.3-1.5,2.9-4.7,1.3-6.9 c-1.5-2.3-4.7-2.9-6.9-1.3C30.1,7.2,18,22.7,10.9,41.7C4.8,58,0.7,74.8-1.5,91.9c-0.7,5.4-1.3,10.9-1.9,16.2c0,0,0,0.1,0,0.1 c0,0.1,0,0.1,0,0.2c-0.5,6.6-0.9,13.4-1.2,20.3c-0.3,2-0.4,4.1-0.3,6.3c0.3,10.6,4.4,19.6,12.1,26.9 C14.6,168.9,23.5,172.4,33.7,172.4z",
        b"M74.5,118.4c-1.4-1.4-3.1-2.4-5-3c-22.6-7.4-45.2-9.9-68-7.7c-0.5,6.7-0.9,13.5-1.2,20.5C0,130-0.1,131.8,0,133.8c0.3,9.3,3.8,17.1,10.5,23.4c6.8,6.4,14.9,9.4,24.2,9.1c9.3-0.3,17.2-3.8,23.5-10.7c3.6-3.7,6.2-8,7.9-12.8c3.6-0.4,6.6-1.9,8.9-4.4c2.6-2.9,3.9-6.4,3.8-10.2C78.9,124.4,77.4,121.1,74.5,118.4z",
        b"M15.6,43.5c-6,16-10,32.3-12.1,49.1c-0.7,5.4-1.3,10.8-1.9,16.1c22.8-2.2,45.5,0.3,68,7.7c1.2-14,3.8-28.1,7.7-42.3c3.9-14.2,12.5-29.8,25.9-46.8L49.7,0C33.7,10.8,22.4,25.3,15.6,43.5z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let p1 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p2 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p3 = paths.pop_back();

    container::g(vector[p1, p2, p3]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(-2.9166107177734375, 0, 0, 2.9166107177734375, 1880.95,1719.3)".to_string(),
        ),
    )
}

fun right_leg(fill: String): container::Container {
    let mut paths = vector[
        b"M80.8,240H37.6C26,240,16,236.4,7.8,229.4c-8.5-7-12.8-15.8-12.8-26.2c0-3.2,0.4-6.3,1.2-9.3c1.8-7.9,3.5-15.6,4.9-23.2 c0-0.1,0-0.3,0.1-0.4c5.6-27.1,8.4-49.3,8.1-65.9c0-2.8,2.2-5,4.9-5.1c0,0,0,0,0.1,0c2.7,0,5,2.2,5,4.9 c0.2,17.3-2.6,40.1-8.3,67.8c0,0.1,0,0.2-0.1,0.3c-1.5,7.7-3.2,15.7-5,23.8c0,0.1,0,0.1,0,0.2c-0.6,2.2-0.9,4.5-0.9,6.8 c0,7.3,3,13.4,9.2,18.5c0,0,0,0,0.1,0.1c6.5,5.5,14.1,8.2,23.3,8.2h43.2c1.6,0,3.1-0.1,4.6-0.4c0,0,0.1,0,0.1,0 c4.7-0.6,8.9-2,12.7-4.4c0,0,0.1-0.1,0.1-0.1c1.6-0.9,3.1-2,4.6-3.3c0.1-0.1,0.1-0.1,0.2-0.1c6.2-5.1,9.2-11.2,9.2-18.5 c0-7.3-3-13.5-9.3-18.8c-5.1-4.3-10.9-6.8-17.6-7.7c-1.4-0.2-2.9-0.3-4.4-0.4c-0.2,0-0.3,0-0.5,0c-0.6-0.1-1.1-0.2-1.6-0.5 c-0.7-0.3-1.3-0.8-1.7-1.4c-0.5-0.6-0.8-1.2-1-2c-0.1-0.5-0.2-1.1-0.1-1.7c0-0.2,0-0.3,0.1-0.5c3.3-17.6,5.3-34.7,6-50.8 c0.2-5.4,0.3-8.9,0.3-10.4c0.1-2.8,2.3-4.9,5.1-4.9c2.8,0.1,5,2.3,4.9,5.1c0,1.6-0.1,5-0.4,10.6c-0.6,14.9-2.4,30.6-5.2,46.8 c8.4,1.2,16,4.6,22.5,9.9c0,0,0,0,0,0c8.5,7.2,12.8,16.1,12.8,26.4c0,10.3-4.3,19.1-12.8,26.1c-1.9,1.7-4,3.2-6.1,4.4 c-5,3.1-10.6,5-16.6,5.8C84.9,239.8,82.9,240,80.8,240C80.9,240,80.9,240,80.8,240z",
        b"M6,170.4c-1.5,7.7-3.1,15.6-5,23.7c-0.7,2.6-1,5.3-1,8.1c0,8.8,3.7,16.3,11,22.4c7.3,6.3,16.2,9.4,26.6,9.4 h43.2c1.8,0,3.5-0.2,5.2-0.4c5.4-0.7,10.3-2.4,14.7-5.1c1.9-1.1,3.7-2.4,5.4-3.9c7.4-6.1,11-13.5,11-22.4 c0-8.8-3.7-16.4-11-22.6c-5.8-4.8-12.5-7.8-20.1-8.9c-1.6-0.2-3.3-0.4-5.1-0.4C54.5,176.9,29.5,176.9,6,170.4z",
        b"M6,171.3L6,171.3c23.5,6.5,48.4,6.5,74.9,0c3.3-18,5.3-35.2,6.1-51.5c0.2-5.5,0.3-9,0.3-10.5l-73.1-5 C14.5,121.4,11.8,143.8,6,171.3z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let p1 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p2 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p3 = paths.pop_back();

    container::g(vector[p1, p2, p3]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 1463.45,1961.9)".to_string(),
        ),
    )
}

fun body(fill: String): container::Container {
    let mut paths = vector[
        b"M293.3,186.1c-0.8-22.8-2.9-46.2-6.4-70.2c-5.8-25.7-16.5-47.5-32.3-65.5C241.5,35.6,225,23.3,205,13.8 c-15-7.2-31.1-11.7-48.1-13.4h-0.1c-0.2,0-0.4-0.1-0.7-0.1c-0.7,0-1.5-0.1-2.2-0.1l-2.6,0c-0.2,0-0.4,0-0.6,0h-1.4 c-0.3,0-0.7,0-1,0H145c-0.3,0-0.7,0-1.1,0c0,0-0.1,0-0.1,0h-1.2c-0.4,0-0.8,0-1.1,0c-1.1,0-2.1,0.1-3.2,0.1 c-0.4,0-0.8,0.1-1.2,0.1c-17.2,1.7-33.5,6.2-48.8,13.5C44.2,34.9,16.9,69,6.4,115.9c-3.5,24-5.6,47.3-6.4,70.2 c-1.3,69,43.7,104.5,134.8,106.6c0.5,0,1.1,0,1.6,0l5.4,0.1c0.3,0,0.7,0,1.1,0h0.9c0.1,0,0.1,0,0.1,0h1.1c0.3,0,0.5,0,0.8,0h2.9 c0.2,0,0.4,0,0.5,0c0,0,0.1,0,0.2,0c0.6,0,1.3,0,1.9,0l5.4-0.1c0.5,0,1.1,0,1.6,0C249.6,290.6,294.5,255.1,293.3,186.1z",
        b"M151.4,297.8h-9.5c0,0-0.1,0-0.1,0l-5.4-0.1h-1.6c0,0-0.1,0-0.1,0c-23.1-0.5-43.6-3.2-60.9-8 c-17.6-4.9-32.4-12-44.1-21.3C6,249.7-5.6,222-4.9,186c0,0,0-0.1,0-0.1c0.8-22.9,2.9-46.7,6.4-70.7c0-0.1,0-0.2,0.1-0.4 C7,90.7,16.8,69.6,30.9,52C45,34.5,63.6,20.1,86.2,9.2c15.7-7.6,32.7-12.3,50.4-14c0,0,0.1,0,0.1,0c0.4,0,0.8-0.1,1.1-0.1 c0.1,0,0.2,0,0.3,0l3-0.1c0.4,0,0.9-0.1,1.4-0.1h8.2c0.3,0,0.7,0,1,0.1l2.4,0.1c0.1,0,0.1,0,0.2,0c0.3,0,0.6,0,1,0 c0.5,0,1,0.1,1.5,0.1c0,0,0,0,0,0c0.2,0,0.5,0.1,0.7,0.1c17.5,1.8,34.2,6.4,49.7,13.9c20.5,9.8,37.7,22.6,51.1,37.9 c16.3,18.5,27.6,41.3,33.5,67.7c0,0.1,0.1,0.2,0.1,0.4c3.5,24,5.7,47.8,6.4,70.7c0,0,0,0.1,0,0.1c0.6,36-11,63.7-34.7,82.4 c-11.7,9.3-26.6,16.4-44.1,21.3c-17.3,4.8-37.8,7.5-60.9,8c0,0-0.1,0-0.1,0h-1.6L151.4,297.8 C151.5,297.8,151.5,297.8,151.4,297.8z M141.9,287.8h9.5l5.4-0.1c0,0,0.1,0,0.1,0h1.5c44.2-1,77.5-10.2,99-27.1 c10.5-8.3,18.4-18.7,23.5-30.9c5.2-12.3,7.6-27,7.3-43.4c-0.8-22.4-2.9-45.8-6.3-69.4c-5.6-24.7-16.1-45.9-31.2-63.1 c-12.6-14.3-28.7-26.2-48-35.5c-14.4-6.9-30-11.3-46.3-12.9c-0.1,0-0.3,0-0.4,0c-0.1,0-0.3,0-0.4-0.1c-0.7,0-1.3-0.1-2-0.1 L151.2,5c-0.2,0-0.4,0-0.6,0h-8c-0.2,0-0.4,0-0.6,0c-0.1,0-0.2,0-0.3,0l-3.1,0.1c-0.3,0-0.7,0.1-1.1,0.1c-16.5,1.6-32.4,6-47,13 c-21.3,10.2-38.7,23.7-51.8,40c-13.1,16.3-22.3,36-27.3,58.6c-3.4,23.6-5.6,46.9-6.3,69.4c-0.3,16.4,2.2,31.1,7.3,43.4 c5.1,12.2,13,22.6,23.5,30.9c21.5,17,54.8,26.1,99,27.1h1.5c0,0,0.1,0,0.1,0L141.9,287.8z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let outline = paths.pop_back();
    let path = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));

    container::g(vector[path, outline]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 956.5,1516.1)".to_string(),
        ),
    )
}

fun left_leg(fill: String): container::Container {
    let mut paths = vector[
        b"M80.8,240H37.6C26,240,16,236.4,7.8,229.4c-8.5-7-12.8-15.8-12.8-26.2c0-3.2,0.4-6.3,1.2-9.3c1.8-7.8,3.5-15.6,4.9-23.2 c0-0.1,0-0.3,0.1-0.4c5.6-27.1,8.4-49.3,8.1-65.9c0-2.8,2.2-5,4.9-5.1c2.8,0,5,2.2,5.1,4.9c0.2,17.3-2.6,40.1-8.3,67.8 c0,0.1,0,0.2-0.1,0.3c-1.5,7.7-3.2,15.7-5,23.8c0,0.1,0,0.1,0,0.2c-0.6,2.2-0.9,4.5-0.9,6.8c0,7.3,3,13.4,9.2,18.5 c0,0,0,0,0.1,0.1c6.5,5.5,14.1,8.2,23.3,8.2h43.2c1.6,0,3.1-0.1,4.6-0.4c0,0,0.1,0,0.1,0c4.7-0.6,8.9-2,12.7-4.4 c0,0,0.1-0.1,0.1-0.1c1.6-0.9,3.1-2,4.6-3.3c0.1-0.1,0.1-0.1,0.2-0.1c6.2-5.1,9.2-11.2,9.2-18.5c0-7.4-3-13.5-9.3-18.8 c-5.1-4.3-10.9-6.8-17.6-7.7c-1.4-0.2-2.9-0.3-4.4-0.4c-0.2,0-0.3,0-0.5,0c-0.6-0.1-1.1-0.2-1.6-0.5c-0.7-0.3-1.3-0.8-1.7-1.4 c-0.5-0.6-0.8-1.2-1-2c-0.1-0.5-0.2-1.1-0.1-1.7c0-0.2,0-0.3,0.1-0.5c3.3-17.6,5.3-34.7,6-50.8c0.2-5.4,0.3-8.9,0.3-10.4 c0.1-2.7,2.3-4.9,5-4.9c0,0,0.1,0,0.1,0c2.8,0.1,5,2.3,4.9,5.1c0,1.6-0.1,5-0.4,10.6c-0.6,14.9-2.4,30.6-5.2,46.8 c8.4,1.2,16,4.6,22.5,9.9c0,0,0,0,0,0c8.5,7.2,12.8,16.1,12.8,26.4c0,10.3-4.3,19.1-12.8,26.1c-1.9,1.7-4,3.2-6.1,4.4 c-5,3.1-10.6,5-16.6,5.8C84.9,239.8,82.9,240,80.8,240C80.9,240,80.9,240,80.8,240z",
        b"M6,170.4c-1.5,7.7-3.1,15.6-5,23.7c-0.7,2.6-1,5.3-1,8.1c0,8.8,3.7,16.3,11,22.4c7.3,6.3,16.2,9.4,26.6,9.4 h43.2c1.8,0,3.5-0.2,5.2-0.4c5.4-0.7,10.3-2.4,14.7-5.1c1.9-1.1,3.7-2.4,5.4-3.9c7.4-6.1,11-13.5,11-22.4 c0-8.8-3.7-16.4-11-22.6c-5.8-4.8-12.5-7.8-20.1-8.9c-1.6-0.2-3.3-0.4-5.1-0.4C54.5,176.9,29.5,176.9,6,170.4z",
        b"M6,171.3L6,171.3c23.5,6.5,48.4,6.5,74.9,0c3.3-18,5.3-35.2,6.1-51.5c0.2-5.5,0.3-9,0.3-10.5l-73.1-5 C14.5,121.4,11.8,143.8,6,171.3z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let p1 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p2 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p3 = paths.pop_back();

    container::g(vector[p1, p2, p3]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 1042.6,1961.9)".to_string(),
        ),
    )
}

fun left_arm(fill: String): container::Container {
    let mut paths = vector[
        b"M33.7,172.4c-10.1,0-19-3.5-26.5-10.5c-7.7-7.3-11.8-16.3-12.1-26.9c-0.1-2.2,0-4.3,0.3-6.3c0.4-6.9,0.8-13.7,1.2-20.3 c0,0,0-0.1,0-0.1c0,0,0,0,0,0v0c0,0,0-0.1,0-0.1c0.6-5.4,1.2-10.8,1.9-16.2c2.2-17.1,6.4-34,12.4-50.2c7.1-19,19.2-34.5,36-45.8 c2.3-1.5,5.4-0.9,6.9,1.3c1.5,2.3,0.9,5.4-1.3,6.9c-15,10.2-25.9,24-32.3,41.1c-5.8,15.5-9.8,31.7-11.9,48 c-0.7,5.3-1.3,10.7-1.9,16c-0.5,6.6-0.9,13.4-1.2,20.3c0,0.2,0,0.3,0,0.5c-0.2,1.4-0.3,3-0.2,4.6c0,0,0,0.1,0,0.1 c0.2,8,3.2,14.5,9,20c5.8,5.5,12.6,8,20.6,7.8c8-0.2,14.5-3.2,20-9.1c0,0,0,0,0,0c3.1-3.2,5.4-6.9,6.8-11 c0.6-1.8,2.3-3.1,4.2-3.3c2.4-0.3,4.3-1.2,5.8-2.8c1.8-2,2.6-4.1,2.5-6.7c-0.1-2.6-1-4.6-2.9-6.3c0,0-0.1-0.1-0.1-0.1 c-0.9-0.9-1.9-1.5-3-1.9c-0.4-0.1-0.7-0.3-1.1-0.5c-0.6-0.4-1.2-0.9-1.6-1.5c-0.4-0.6-0.7-1.3-0.8-2.1c-0.1-0.4-0.1-0.8,0-1.2 c1.3-14.2,3.9-28.7,7.8-43.1c4-14.8,13-31.2,26.8-48.6c1.7-2.2,4.9-2.5,7-0.8c2.2,1.7,2.5,4.9,0.8,7 c-12.9,16.4-21.3,31.6-25,45.1c-3.5,12.7-5.9,25.5-7.2,38.1c1.1,0.7,2.1,1.5,3.1,2.4c3.8,3.6,5.8,8,6,13.3c0,0,0,0,0,0 c0.1,5.2-1.6,9.8-5.1,13.7c0,0,0,0,0,0c-2.5,2.7-5.5,4.5-9,5.4c-1.9,4.3-4.6,8.3-7.9,11.8c-7.3,7.8-16.4,12-27,12.3 C34.5,172.4,34.1,172.4,33.7,172.4z",
        b"M74.5,118.4c-1.4-1.4-3.1-2.4-5-3c-22.6-7.4-45.2-9.9-68-7.7c-0.5,6.7-0.9,13.5-1.2,20.5 C0,130,0,131.8,0.1,133.8c0.3,9.3,3.8,17.1,10.5,23.4c6.8,6.4,14.9,9.4,24.2,9.1c9.3-0.3,17.2-3.8,23.5-10.7 c3.6-3.7,6.2-8,7.9-12.8c3.6-0.4,6.6-1.9,8.9-4.4c2.6-2.9,3.9-6.4,3.8-10.2C78.9,124.4,77.4,121.1,74.5,118.4z",
        b"M15.6,43.5c-6,16-10,32.3-12.1,49.1c-0.7,5.4-1.3,10.8-1.9,16.1c22.8-2.2,45.5,0.3,68,7.7 c1.2-14,3.8-28.1,7.7-42.3c3.9-14.2,12.5-29.8,25.9-46.8L49.7,0C33.7,10.8,22.4,25.3,15.6,43.5z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let p1 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p2 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p3 = paths.pop_back();

    container::g(vector[p1, p2, p3]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 1002.9,1719.3)".to_string(),
        ),
    )
}

fun right_ear(fill: String): container::Container {
    let mut paths = vector[
        b"M60.9,99.9c0.9-0.7,1.6-1.6,1.9-2.8c0.7-2.7-1-5.4-3.7-6c-1.7-0.4-3.5-1.2-5.3-2.2C37.8,79.7,23.4,68.3,11,55 c0,0,0,0,0,0c-2.6-2.8-4.4-5.6-5.3-8.8c-0.9-3.1-0.9-5.9,0-8.5c4.4-13.2,11.8-23.4,21.8-30.3C30,5.7,32.9,4.9,36.4,5 c3.8,0.2,7.3,1.3,10.8,3.3c15.8,9.4,30.2,20.2,42.7,32c1.9,1.8,3.4,3.8,4.6,5.8c1.4,2.4,4.5,3.2,6.8,1.8 c2.4-1.4,3.2-4.5,1.8-6.8c-1.6-2.8-3.7-5.4-6.3-7.9c0,0,0,0-0.1-0.1C83.7,20.7,68.7,9.5,52.3-0.3c0,0,0,0,0,0 C47.3-3.2,42.1-4.8,36.8-5c0,0,0,0-0.1,0C31.2-5.2,26.2-3.8,22-1c0,0-0.1,0-0.1,0.1C9.9,7.2,1.3,19.1-3.8,34.5 C-5.3,39-5.4,43.8-4,48.8c0,0,0,0,0,0c1.4,4.7,3.9,9.1,7.7,13c13.1,14,28.2,26,45,35.7c2.6,1.5,5.3,2.6,7.9,3.2 C58.2,101.2,59.7,100.8,60.9,99.9z",
        b"M98.8,43.5c-1.4-2.4-3.2-4.7-5.4-6.8C80.5,24.6,65.9,13.7,49.7,4c-4.2-2.5-8.6-3.8-13.2-4 C32-0.1,28.1,0.9,24.7,3.1C13.6,10.7,5.7,21.7,0.9,36c-1.2,3.5-1.2,7.3-0.1,11.4c1.1,4,3.3,7.6,6.5,10.9 c12.8,13.7,27.4,25.3,43.9,34.8c2.2,1.3,4.4,2.2,6.6,2.7L98.8,43.5z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let p1 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p2 = paths.pop_back();

    let inner_g = container::g(vector[p1, p2]).map_attributes!(|attrs| {
        attrs.insert(
            b"transform".to_string(),
            b"matrix(-0.799560546875, 0.60052490234375, 0.60052490234375, 0.799560546875, 80.75,8.45)".to_string(),
        );
    });

    container::g(vector[shape::custom(inner_g.to_string())]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 1097.75,348.85)".to_string(),
        ),
    )
}

fun head(fill: String): container::Container {
    let path = shape::path(
        b"M540.4,89c-9.1-15.7-20-29.5-32.9-41.5c-13-12-27.1-21.6-42.5-28.7c-15.8-7.2-32.1-11.5-48.9-12.7 c-48.7-3.8-97.8-5.9-147.3-6.1c-1.7,0-3.4,0-5.1,0c-40.5-0.1-81.2,1-122.3,3.3C118.4,4.5,97,11,77.3,22.8 c-7.8,4.7-15.1,10-21.8,16c-9.7,8.6-18.3,18.5-25.9,29.8C16.6,87.8,7.9,109.3,3.4,132.9c-4.7,24.6-4.5,49.6,0.6,75 c2,9.6,4,19.1,6.1,28.5c35.3,126.3,131.4,171.1,288.1,134.4l32.9-8.6c2.5-0.7,4.9-1.3,7.4-2c19.9-5.4,39.7-11.2,59.6-17.2 c120.1-34.7,175.9-94.1,167.6-178.3c-1.6-7.9-3.3-15.9-5.2-23.9C556.4,122.3,549.7,105.1,540.4,89z".to_string(),
        option::none(),
    ).map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));

    let nose = shape::path(
        b"M531.9,152.4c-5.2-26.7-18-47.9-38.4-63.6c-20.4-15.6-42.5-21.2-66.2-16.6c-23.7,4.6-42,18-55.1,40.1 c-13.1,22.1-17,46.6-11.9,73.3c0.8,4.3,1.9,8.5,3.1,12.5c6.4,21,18.2,38,35.2,51.1c5.4,4.1,10.8,7.5,16.4,10.2 c15.7,7.6,32.3,9.7,49.8,6.3c16.7-3.2,30.8-10.8,42.2-22.8c2.7-2.7,5.2-5.7,7.5-8.9c1.9-2.6,3.8-5.4,5.5-8.4 C533.1,203.6,537.1,179.1,531.9,152.4z".to_string(),
        option::none(),
    ).map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));

    let head_pattern = shape::path(
        b"M201.7,388.2c-3.3,0-6.5-0.1-9.7-0.2c-32.1-1-60.9-7.4-85.4-18.8C82,357.7,61,340.8,44.1,318.8 C27.4,297,14.4,269.7,5.4,237.7c0-0.1,0-0.2-0.1-0.2c-2.1-9.4-4.2-19-6.2-28.5c-5.3-25.9-5.5-51.8-0.7-77 c4.6-24.2,13.7-46.4,26.9-66.1c7.8-11.6,16.8-21.9,26.7-30.7c7-6.2,14.6-11.8,22.6-16.6C95,6.4,117.4-0.4,141.1-1.7 c41-2.3,82.3-3.4,122.6-3.3c1.7,0,3.4,0,5.1,0c49.4,0.2,99.1,2.3,147.7,6.1c17.3,1.3,34.3,5.7,50.5,13.2 c15.8,7.3,30.5,17.3,43.8,29.6c13.2,12.2,24.6,26.6,33.8,42.6c9.5,16.4,16.5,34.2,20.9,52.9c0,0,0,0,0,0 c1.9,8.1,3.6,16.2,5.2,24.1c0,0.2,0.1,0.3,0.1,0.5c2.1,21.7,0.1,42-6,60.6c-6.2,18.6-16.6,35.8-31,51.1 c-14.3,15.2-32.9,29-55.2,40.9c-22.2,11.9-48.8,22.3-79,31c-19.8,6-39.9,11.8-59.7,17.2c-2.5,0.7-5,1.4-7.5,2.1l-32.9,8.7 c0,0-0.1,0-0.1,0C264,384,231.1,388.2,201.7,388.2z M15,235.1c8.6,30.7,21.1,56.9,37,77.6c15.9,20.6,35.6,36.6,58.8,47.4 c23.3,10.9,50.7,16.9,81.5,17.9c31,1,66.3-3.1,104.8-12.1l32.8-8.6c2.4-0.6,4.9-1.3,7.4-2c19.8-5.4,39.8-11.2,59.5-17.2 c0,0,0,0,0.1,0c29.5-8.5,55.5-18.7,77-30.3c21.4-11.5,39.1-24.6,52.7-39c13.4-14.3,23.1-30.2,28.8-47.4 c5.7-17.1,7.6-36.1,5.6-56.2c-1.5-7.8-3.2-15.7-5.1-23.5c-4.2-17.8-10.8-34.6-19.8-50.2c-8.8-15.2-19.5-28.7-32-40.3 c-12.5-11.6-26.4-21-41.2-27.8c-15.2-6.9-31-11.1-47.1-12.3C367.4,7.3,318,5.3,268.8,5c-1.7,0-3.4,0-5.1,0 c-40.2-0.1-81.2,1-122,3.3c-22.1,1.2-42.9,7.5-61.8,18.8c-7.5,4.5-14.6,9.7-21.1,15.5c-9.3,8.3-17.8,18-25.1,28.9 C21.2,90,12.7,111,8.3,133.8c-4.6,23.8-4.4,48.4,0.6,73.1C10.9,216.3,12.9,225.8,15,235.1z".to_string(),
        option::none(),
    );

    container::g(vector[path, nose, head_pattern]).map_attributes!(
        |attrs| attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 848.15,585.65)".to_string(),
        ),
    )
}

fun left_ear(fill: String): container::Container {
    let mut paths = vector[
        b"M57.9,101c-0.4,0-0.8,0-1.2-0.1c-2.7-0.6-5.3-1.7-7.9-3.2c-16.8-9.7-32-21.7-45-35.7C0,58-2.6,53.6-4,48.9c0,0,0,0,0,0 c-1.4-5.1-1.4-9.9,0.1-14.3C1.3,19.1,9.9,7.2,21.9-1c0,0,0.1,0,0.1-0.1c4.3-2.8,9.2-4.1,14.7-4c0,0,0,0,0.1,0 c5.4,0.2,10.6,1.8,15.5,4.7c0,0,0,0,0,0c16.4,9.8,31.4,21,44.5,33.3c0,0,0,0,0.1,0.1c2.5,2.5,4.7,5.1,6.3,7.9 c1.4,2.4,0.6,5.4-1.8,6.8c-2.4,1.4-5.4,0.6-6.8-1.8c-1.2-2-2.7-3.9-4.6-5.8C77.4,28.5,63,17.7,47.2,8.3C43.7,6.3,40.1,5.2,36.4,5 c-3.4-0.1-6.4,0.7-8.9,2.3C17.4,14.2,10.1,24.4,5.6,37.6c-0.8,2.6-0.8,5.4,0,8.5c0.9,3.2,2.6,6.1,5.3,8.8c0,0,0,0,0,0 c12.4,13.2,26.8,24.6,42.8,33.9c1.8,1,3.5,1.7,5.3,2.2c2.7,0.7,4.3,3.4,3.7,6C62.2,99.4,60.1,101,57.9,101z",
        b"M98.8,43.5c-1.4-2.4-3.2-4.7-5.4-6.8C80.5,24.6,65.9,13.7,49.7,4c-4.2-2.5-8.6-3.8-13.2-4 C32-0.1,28.1,0.9,24.7,3.2C13.6,10.8,5.7,21.7,0.9,36c-1.2,3.5-1.2,7.3,0,11.4c1.1,4,3.3,7.6,6.5,11 c12.8,13.7,27.4,25.3,43.9,34.8c2.2,1.3,4.4,2.2,6.6,2.7L98.8,43.5z",
    ].map!(|path| shape::path(path.to_string(), option::none()));

    let p1 = paths.pop_back().map_attributes!(|attrs| attrs.insert(b"fill".to_string(), fill));
    let p2 = paths.pop_back();

    container::g(vector[p1, p2]).map_attributes!(|attrs| {
        attrs.insert(
            b"transform".to_string(),
            b"matrix(2.9166107177734375, 0, 0, 2.9166107177734375, 746.1,619.15)".to_string(),
        );
    })
}
